{"version":3,"sources":["Components/Note.js","services/notes.js","Components/Error.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","axios","get","then","response","data","newObject","post","id","put","Error","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","Initialnotes","console","log","catch","error","length","notesToShow","filter","map","key","find","n","changedNote","returnedNotedata","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","target","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e643c1e4.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Note({ note, toggleImportance }) {\n\n    const label = note.important ? 'make not important' : 'make important'\n\n    return (\n        <div>\n            <li className='note'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n            </li>\n        </div>\n    )\n}\n","import axios from 'axios'\nconst baseURL = '/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseURL);\n    // const nonExisting = {\n    //     id: 10000,\n    //     content: 'This note is not saved to server',\n    //     date: '2019-05-30T17:30:31.098Z',\n    //     important: true,\n    //   }\n    return request.then(response => response.data);\n}\n\nconst create = newObject => {\n    const request = axios.post(baseURL,newObject);\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseURL}/${id}`,newObject);\n    return request.then(response => response.data);\n}\n\nexport default {getAll, create, update}","import React from 'react'\n\nexport default function Error({ message }) {\n    if(message === null){\n        return null;\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n","import React, { useState, useEffect } from 'react';\n// import logo from './logo.svg';\nimport './CSS/App.css';\nimport axios from 'axios';\nimport Note from './Components/Note';\nimport noteService from './services/notes'\nimport Error from './Components/Error'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div> \n  )\n}\n\n\nfunction App() {\n\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  const hook = () => {\n    // console.log('effect');\n    // axios.get('http://localhost:3001/notes').then(response => {\n    // // const notes = response.data\n    // console.log('promise fulfilled');\n    // setNotes(response.data);\n    // // console.log(notes);\n    // })\n    noteService.getAll().then(Initialnotes => {\n      console.log(\"initial notes\", Initialnotes);\n      setNotes(Initialnotes);\n    }).catch(error => {\n      console.log('fail')\n    })\n  };\n\n  useEffect(hook, []);\n  console.log('render',notes.length,'notes');\n  console.log(notes);\n  \n  const addNote = (event) => {\n    // console.log(event);\n    event.preventDefault();\n    console.log('button clicked', event.target);\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n    };\n\n    // axios.post('http://localhost:3001/notes',noteObject).then(response => {\n    //   console.log(response)\n    //   setNotes(notes.concat(response.data));\n    //   setNewNote('');\n    // });\n    noteService.create(noteObject).then(changedNote => {\n      setNotes(notes.concat(changedNote));\n      setNewNote('');\n    }).catch(error => {\n      console.log('fail')\n    })\n  }\n\n\n  const handleNoteChange = (event) => {\n    // console.log(document.getElementById(\"FDD\").value);\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n    console.log(newNote);\n  }\n  \n  // console.log(notes)\n  const notesToShow = showAll ? notes : notes.filter(note => note.important === true)\n\n  const toggleImportanceOf = (id) => {\n        console.log('Importance of ', id, ' needs to be toggled.');\n        // const url = `http://localhost:3001/notes/${id}`\n        const note = notes.find(n => n.id === id);\n        console.log(note.important)\n        const changedNote = {...note, important:!note.important}\n        console.log(changedNote.important)\n        // axios.put(url,changedNote).then(response => {\n        //   setNotes(notes.map(note => note.id !== id ? note : response.data));\n        // })\n        noteService.update(id,changedNote).then(returnedNotedata => {\n          notes.map(note => note.id !== id ? note : returnedNotedata)\n          // A function call to getAll added here to get the updated data from the json server\n          noteService.getAll().then(Initialnotes => {\n            console.log(\"initial notes\", Initialnotes);\n            setNotes(Initialnotes);\n          }).catch(error => {\n            console.log('fail')\n          })\n          // setNotes(notes);\n          // setNotes(notes);\n\n        }).catch(error => {\n          setErrorMessage(\n            `Note '${note.content}' was already removed from server`\n          )\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000)\n          setNotes(notes.filter(n => n.id !== id));\n        }\n        );\n    }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Error message={errorMessage}/>\n      <ul>\n        {notesToShow.map(note => <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)}/>)}\n      </ul>\n      <button onClick={() => setShowAll(!showAll)}>\n        show{showAll ? 'important':'all'}\n      </button>\n      <form onSubmit={addNote}>\n        <input id=\"FDD\" value={newNote} onChange={handleNoteChange}/>\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './CSS/index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}